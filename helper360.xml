<krpano>
	
	<style name="text"
	       type="text"
	       background="false"
	       css="color:#FFFFFF;"
	       enabled="false"
	       />
		   
	<action name="print">
		showlog();
		trace(" ",%1);
	</action>
	
	<action name="check_navigation" if="1">
		screentosphere(mouse.x, mouse.y, mouse_hlookat, mouse_vlookat);
		mod(mouse_hlookat,360);
		if(mouse_hlookat LT 0,
			add(mouse_hlookat,360));
		
		copy(v, global.view);
			for(set(i,0), i LT style.count, inc(i),
				indexoftxt(is_movable_hotspot, get(style[get(i)].name), 'scene_');
				
				if(is_movable_hotspot == 0,
					copy(hs, style[get(i)]);
					copy(x,hs.ox);
					copy(y,hs.oy);
					copy(z,hs.oz);
					
					sub(xlength,x,v.tx);
					sub(zlength,z,v.tz);
					
					Math.atan2(hg,xlength,zlength);
					mul(hg,180);
					div(hg,Math.pi);
					if(hg LT 0,
						add(hg,360));
					
					calc(distance,sqrt(pow(xlength,2)+pow(zlength,2)));
					sub(height,get(y),v.ty);
					
					Math.atan2(vg,height,distance);
					
					mul(vg,180);
					div(vg,Math.pi);
					
					<!-- Check if close to mouse click -->
					calc(angle_hdiff, abs(hg - mouse_hlookat));
					calc(angle_vdiff, abs(vg - mouse_vlookat));
					
					if(image.angle_tolerance === null,
						set(angle_tolerance,30);
						,
						copy(angle_tolerance,image.angle_tolerance);
					);
					if(image.vangle_tolerance === null,
						set(vangle_tolerance,30);
						,
						copy(vangle_tolerance,image.vangle_tolerance);
					);
					
					
					if(angle_hdiff LE angle_tolerance AND angle_vdiff LE vangle_tolerance AND distance LE 800 AND distance GT 0,
						
						indexoftxt(is_allowed,get(image.allowed),get(hs.name));
						<!-- WILDCARD 'ANY!' 
							indexoftxt(is_allowed,get(image.allowed),'scene');
						-->
						indexoftxt(wildcard,get(image.allowed),'ANY!');
						
						if(wildcard != -1,
							set(is_allowed,1); <!-- Allowed -->
						);
						if(is_allowed != -1,
							if (winner !== null,
								if(distance LE winnerdistance,
									copy(winnerdistance,distance);
									copy(winner,hs);
								);
								,
								copy(winnerdistance,distance);
								copy(winner,hs);
							);
						);
					);
				);
				
				
				
			);
			if (winner !== null,
				
				if(xml.scene != winner.linkedscene,
					tour_loadscene(get(winner.linkedscene));
				);
				<!--
				tween(view.tx|view.ty|view.tz, calc(image.ox + '|' + image.oy + '|' + image.oz), calc(winnerdistance*0.005), default);
				-->
				,
				<!-- If no winner attempt to move and fail -->
				
			);
			delete(winner);
			delete(winnerdistance);
			
			
	</action>
	
	<action name="tour_loadscene" scope="local" args="scenename">
	if(xml.scene != scenename,		
	
		indexoftxt(has_stateinfo, get(scenename),'pano');
		<!--
		print(get(scenename));
		print(get(has_stateinfo));
		-->
		if(has_stateinfo != -1, <!-- IF IT HAS STATE INFO, then just load scene right away -->
			loadscene(get(scenename),null,MERGE|KEEPMOVING,BLEND(0.5));		
			tween(view.tx|view.ty|view.tz, calc(image.ox + '|' + image.oy + '|' + image.oz), 2.0, default);
			,
			<!-- ELSE, NORMAL LOAD -->
			<!-- MAKE EXCEPTIONS PER LOADING -->
			indexoftxt(i,get(scenename),'_');
			inc(i);
			calc(scene_n,slice(get(scenename),i,scenename.length)); 
			
			copy(to_load,scenename);
			calc(to_load, scenename + 'pano_' + layer[stateHolder].habstate + 'hab_' + layer[stateHolder].floorstate);
			
			if(scene_n == 1,
				calc(to_load, scenename + 'pano_' + '2hab_' + layer[stateHolder].floorstate);
			);
			
			
			
			<!-- print(get(to_load)); -->
			loadscene(get(to_load),null,MERGE|KEEPMOVING,BLEND(0.5));		
			tween(view.tx|view.ty|view.tz, calc(image.ox + '|' + image.oy + '|' + image.oz), 2.0, default);
		);
		
		
		
		<!-- delete_golden_array(); -->
		
		
		copy(scenename,xml.scene);
		indexoftxt(i,get(scenename),'_');
		inc(i);
		calc(scene_n,slice(get(scenename),i,scenename.length)); 
	);
	</action>
	
	<action name="floorspot_onclick" scope="local">
		
		if(xml.scene != caller.linkedscene,
			tour_loadscene(get(caller.linkedscene));
		);
	</action>
	
	<action name="generate_floorspots" autorun="onstart" scope="local">
		set(floorheight, 160.0);
		for(set(i,0), i LT style.count, inc(i),
			if (style[get(i)].autohotspot == true,
				copy(st, style[get(i)]);
				addhotspot(calc('hotspot_' + (i+1)), hs);
				hs.loadstyle(floorspot);
				copy(hs.tx, st.ox);
				copy(hs.tz, st.oz);
				calc(hs.ty, floorheight + 1.0*st.oy - 1.0);
				copy(hs.linkedscene, st.linkedscene);
			);
		);
	</action>
	
	<style name="floorspot" keep="true" type="text"
		css="font-size:20px;text-align:center;" vcenter="true"
		width="200" height="200" scale="0.15"
		bgroundedge="100" bgborder="2 0x000000 1" bgshadow="0 0 5 0xFFFFFF 1.0"
		oversampling="2" mipmapping="true" zorder="1"
		distorted="true" depth="0" depthbuffer="true"
		torigin="world" rotationorder="xyz" rx="-90"
		xalpha="0"
		alpha="0.3"
		onover.addevent="tween(scale,0.16); tween(alpha,0.6);"
		onout.addevent="tween(scale,0.15); tween(alpha,0.3);"
		onclick="floorspot_onclick();"
		enabled="false"
		visible="false"
		/>
	
	<style name="visual_floorspot" keep="true" type="text"
		css="font-size:20px;text-align:center;" vcenter="true"
		width="200" height="200" scale="0.15"
		bgroundedge="100" bgborder="2 0x000000 1" bgshadow="0 0 5 0xFFFFFF 1.0"
		oversampling="2" mipmapping="true" zorder="1"
		distorted="true" depth="0" depthbuffer="true"
		torigin="image" rotationorder="xyz" rx="-90"
		xalpha="0"
		alpha="0.3"
		onover.addevent="tween(scale,0.16); tween(alpha,0.6);"
		onout.addevent="tween(scale,0.15); tween(alpha,0.3);"
		onclick="floorspot_onclick();"
		enabled="true"
		visible="true"
		/>
	
	<events name="orientation" keep="true" onresize="Orientation();"  />
	
	<action name="Orientation">
	if(device.handheld == true,
		if(stagewidth LT stageheight,
				<!-- PORTRAIT -->
				if(stagewidth LE 1010,
					calc(fix_scale_value,stagewidth/1010);
					roundval(fix_scale_value,2)
					mul(fix_scale_value,.6);
					set(layer[infoslide3].scale,get(fix_scale_value));
					set(layer[infoslide2].scale,get(fix_scale_value));
					set(layer[infoslide1].scale,get(fix_scale_value));
					,
					set(layer[infoslide1].scale,1);
					set(layer[infoslide2].scale,1);
					set(layer[infoslide3].scale,1);
				);
				,
				
				<!-- LANDSCAPE -->
				<!-- width and height IS updated. -->
				if(stageheight LE 630,
					calc(fix_scale_value,stageheight/630);
					roundval(fix_scale_value,2);
					mul(fix_scale_value,.6);
					set(layer[infoslide3].scale,get(fix_scale_value));
					set(layer[infoslide2].scale,get(fix_scale_value));
					set(layer[infoslide1].scale,get(fix_scale_value));
					,
					set(layer[infoslide1].scale,1);
					set(layer[infoslide2].scale,1);
					set(layer[infoslide3].scale,1);
				);
		);
	);
	</action>
	
	<action name="tweenlookat" scope="local" args="hlookat,vlookat">
		lookto(get(hlookat),get(vlookat),120,smooth(250,120,100));
	</action>
	
</krpano>